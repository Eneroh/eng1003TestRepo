// Lab 5 start (at slide 5, lab wk 4 b?)
#include <stdio.h>

float mySqrt(float k);

int main()  {
    int x = 4;
    printf("mySqrt(4) = %f\nsqrtf(4) = %f\n", mySqrt(x), sqrtf(x));
}

float mySqrt(float k)   {
    int n;
    float xn = k/2.0;
    for(n = 0; n < 10; n++)
        xn = 0.5*(xn + k/xn);
    return xn;
}

// Function for testing prime numbers
s when
#include <stdio.h>

int isPrime(int num);

    int main()  {
        int x = 10;
        if(isPrime(x))
            printf("%d is prime\n", x);
        else
            printf("%d is not prime\n", x);
    }
int isPrime(int num)    {
    int count;
    for(count = 2; count < num; count++)    {
        if(num % count == 0)
            return 0;
    }
}
// static variables always occupies same memory address meaning value is retained, something within a function
// that remembers when it was called (RAND)

#include <stdio.h>

int counter(void);

int main()  {
    printf("%d\n",counter());
    printf("%d\n",counter());
    printf("%d\n",counter());
    printf("%d\n",counter());
    printf("%d\n",counter());
    printf("%d\n",counter());
    printf("%d\n",counter());
}

int counter(void)   {
    static int count = 0;
    return ++count;
}

//Same thing just smarter and more efficient

#include <stdio.h>

int counter(void);

int main()  {
    for(int k = 0; k < 10; k++)
        printf("counter(): %d\n", counter());
    return 0;
}

int counter(void)   {
    static int count = 0;
    return ++count;
}

// 
